name: Build a kernel with KernelSU patched
on:
    workflow_dispatch:
        inputs:
            KERNEL_GIT:
                description: 'Link to the git repository of your preferred kernel source:'
                required: true
            KERNEL_GIT_BRANCH:
                description: 'Preferred branch of the kernel source git repository:'
                required: true
            KERNEL_ARCH:
                type: choice
                description: 'Kernel architecture (seperate from Android architecture):'
                required: true
                options:
                    - 'arm64'
                    - 'arm'
            KERNEL_CONFIGS:
                description: 'Space-seperated list of kernel configs by order (!IMPORTANT AND DANGEROUS!):'
                required: true

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
          with:
           fetch-depth: 0

        - name: 'Validate workflow options'
          run: |
            if git ls-remote ${{ github.event.inputs.KERNEL_GIT }} | grep -w "${{ github.event.inputs.KERNEL_GIT_BRANCH }}" > /dev/null; then
                echo "--- Kernel source git link and branch points to a valid git repo! ---"
            elif git ls-remote ${{ github.event.inputs.KERNEL_GIT }} > /dev/null; then
                echo "--- Kernel source git link points to a valid git repo, but the branch specified is invalid, please specify the branch properly! ---"
                exit 1
            else
                echo "--- Kernel source git link and branch points to an invalid git repo, please specify them properly! ---"
                exit 1
            fi

        - name: 'Debloat the OS'
          run: |
            export DEBIAN_FRONTEND=noninteractive
            echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV

            echo "Storage spaces before debloat/clean-up:"
            df -h

            sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/swift || true
            sudo docker image prune --all --force
            echo "some directories deleted"

            # Remove large unwanted packages
            sudo apt-get purge -y \
                aria2 ansible azure-cli shellcheck rpm xorriso zsync \
                esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
                google-cloud-sdk imagemagick \
                libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
                mercurial apt-transport-https mono-complete libmysqlclient \
                unixodbc-dev yarn chrpath libssl-dev libxft-dev \
                libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
                snmp pollinate libpq-dev postgresql-client powershell ruby-full \
                sphinxsearch subversion mongodb-org microsoft-edge-stable || true

            # Regex-based purges (for bulk families like mysql, php, dotnet)
            sudo apt-get purge -y $(dpkg-query -W -f='${binary:Package}\n' | grep -E '^mysql|^php|^dotnet') || true

            # Clean up
            sudo apt-get autoremove -y
            sudo apt-get autoclean -y
            echo "some packages purged"

            echo "Storage spaces after debloat/clean-up:"
            df -h

        - name: 'Setup dependencies and environment'
          run: |
            # Setup package sources and apt
            sudo cp /etc/apt/sources.list.d/ubuntu.sources /etc/apt/sources.list.d/ubuntu.sources~
            sudo sed -Ei 's/^Types: deb$/Types: deb deb-src/' /etc/apt/sources.list.d/ubuntu.sources
            sudo apt-get update -y

            # Install kernel build dependencies
            sudo apt build-dep -y linux

            # Download AOSP Clang 19.0.1
            mkdir -p ./aosp-clang
            cd ./aosp-clang
            wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r530567.tar.gz
            tar -xzf clang-r530567.tar.gz
            cd ..

            # Install some general dependencies
            sudo apt-get install -y p7zip-full tar bzip2 unrar gzip zip unzip python3-dev repo

        - name: 'Clone kernel source'
          run: |
            rm -rf ./kernel-src*/
            mkdir ./kernel-src-clone/
            cd ./kernel-src-clone/
            if git ls-remote ${{ github.event.inputs.KERNEL_GIT }} | grep -w "${{ github.event.inputs.KERNEL_GIT_BRANCH }}" > /dev/null; then
                echo "--- Kernel source git link and branch points to a valid git repo! ---"
                if repo init --no-repo-verify --git-lfs --depth=1 -u ${{ github.event.inputs.KERNEL_GIT }} -b ${{ github.event.inputs.KERNEL_GIT_BRANCH }}; then
                    echo "--- Syncing via repo ---"
                    repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j$(nproc --all)
                    echo "--- Syncing finished ---"
                    cd ..
                    ln -sf $(find ./kernel-src-clone/ -maxdepth 2 -type d -name "common" | head -n 1) ./kernel-src
                else
                    echo "--- Cloning via git ---"
                    rm -rf ./.repo/
                    cd ..
                    git clone --depth=1 ${{ github.event.inputs.KERNEL_GIT }} -b ${{ github.event.inputs.KERNEL_GIT_BRANCH }} ./kernel-src-clone/
                    echo "--- Cloning finished ---"
                    ln -sf ./kernel-src-clone ./kernel-src
                fi
            elif git ls-remote ${{ github.event.inputs.KERNEL_GIT }} > /dev/null; then
                echo "--- Kernel source git link points to a valid git repo, but the branch specified is invalid, please specify the branch properly! ---"
                exit 1
            else
                echo "--- Kernel source git link and branch points to an invalid git repo, please specify them properly! ---"
                exit 1
            fi

        - name: 'Clone any submodules if present'
          working-directory: './kernel-src'
          run: |
            git submodule init; git submodule update

            # Delete files that may conflict with kernel functionality
            rm -rf ./android/abi_gki_protected_exports*

        - name: 'Generate the kernel .config file'
          working-directory: './kernel-src'
          run: |
            export PATH=$(realpath ~/aosp-clang/bin):$PATH
            export CLANG_TRIPLE=aarch64-linux-gnu-
            if [ ${{ github.event.inputs.KERNEL_ARCH }} == 'arm' ]; then
                export CLANG_TRIPLE=arm-linux-gnueabi-
            fi

            make ARCH=${{ github.event.inputs.KERNEL_ARCH }} \
                CC=clang \
                LD=ld.lld \
                AR=llvm-ar \
                NM=llvm-nm \
                STRIP=llvm-strip \
                OBJCOPY=llvm-objcopy \
                OBJDUMP=llvm-objdump \
                OBJSIZE=llvm-size \
                READELF=llvm-readelf \
                HOSTCC=clang \
                HOSTCXX=clang++ \
                HOSTAR=llvm-ar \
                HOSTLD=ld.lld \
                CROSS_COMPILE=$CLANG_TRIPLE \
                CLANG_TRIPLE=$CLANG_TRIPLE \
                -j$(nproc --all) O=out ${{ github.event.inputs.KERNEL_CONFIGS }}

            echo 'CONFIG_LOCALVERSION_AUTO=n' >> out/.config
            sed -i '/res="$res${scm:++}"/d' scripts/setlocalversion
            echo 'CONFIG_KPROBES=n' >> out/.config

        - name: 'Build kernel'
          working-directory: './kernel-src'
          run: |
            export PATH=$(realpath ~/aosp-clang/bin):$PATH
            export CLANG_TRIPLE=aarch64-linux-gnu-
            if [ ${{ github.event.inputs.KERNEL_ARCH }} == 'arm' ]; then
                export CLANG_TRIPLE=arm-linux-gnueabi-
            fi

            make ARCH=${{ github.event.inputs.KERNEL_ARCH }} \
                CC=clang \
                LD=ld.lld \
                AR=llvm-ar \
                NM=llvm-nm \
                STRIP=llvm-strip \
                OBJCOPY=llvm-objcopy \
                OBJDUMP=llvm-objdump \
                OBJSIZE=llvm-size \
                READELF=llvm-readelf \
                HOSTCC=clang \
                HOSTCXX=clang++ \
                HOSTAR=llvm-ar \
                HOSTLD=ld.lld \
                CROSS_COMPILE=$CLANG_TRIPLE \
                CLANG_TRIPLE=$CLANG_TRIPLE \
                -j$(nproc --all) O=out Image.gz-dtb dtbo.img

        - name: 'Prepare and Package with AnyKernel3'
          run: |
            echo "Cloning AnyKernel3 repository..."
            git clone https://github.com/blazey66/AnyKernel3.git
            
            echo "Copying built kernel files..."
            cp kernel-src/out/arch/${{ github.event.inputs.KERNEL_ARCH }}/boot/Image.gz-dtb AnyKernel3/
            cp kernel-src/out/arch/${{ github.event.inputs.KERNEL_ARCH }}/boot/dtbo.img AnyKernel3/
            
            echo "Creating flashable zip..."
            cd AnyKernel3
            zip -r9 ../blaze-kernel-sdm439-ksu.zip * -x .git README.md \*placeholder
            cd ..

        - name: 'Upload Flashable Kernel Zip'
          uses: actions/upload-artifact@v4
          with:
            name: blaze-kernel-sdm439-ksu
            path: blaze-kernel-sdm439-ksu.zip
      
        - name: 'Upload Image.gz-dtb'
          uses: actions/upload-artifact@v4
          with:
            name: Image.gz-dtb
            path: kernel-src/out/arch/${{ github.event.inputs.KERNEL_ARCH }}/boot/Image.gz-dtb

        - name: 'Upload dtbo.img'
          uses: actions/upload-artifact@v4
          with:
            name: dtbo.img
            path: kernel-src/out/arch/${{ github.event.inputs.KERNEL_ARCH }}/boot/dtbo.img
