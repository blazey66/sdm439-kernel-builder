name: Build a kernel with KernelSU patched
on:
    workflow_dispatch:
        inputs:
            KERNEL_GIT:
                description: 'Link to the git repository of your preferred kernel source:'
                required: true
            KERNEL_GIT_BRANCH:
                description: 'Preferred branch of the kernel source git repository:'
                required: true
            KERNEL_ARCH:
                type: choice
                description: 'Kernel architecture (seperate from Android architecture):'
                required: true
                options:
                    - 'arm64'
                    - 'arm'
            KERNEL_COMPILER:
                type: choice
                description: 'Compiler choice:'
                required: true
                options:
                    - 'Clang/LLVM'
                    - 'GCC/Binutils'
                    - 'Clang/Binutils'
                    - 'GCC/LLVM'
                    - 'Proton Clang' # Kept for reference, but not recommended
            KERNEL_COMPILER_TOOLCHAIN:
                description: 'Direct link to custom compiler prebuilt toolchain (leave blank if not required):'
                required: false
            KERNEL_COMPILER_PREFIX:
                description: 'Path prefix for custom prebuilt toolchain (must define if custom toolchain, otherwise leave blank):'
                required: false
            KERNEL_CONFIGS:
                description: 'Space-seperated list of kernel configs by order (!IMPORTANT AND DANGEROUS!):'
                required: true

jobs:
    build:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
          with:
           fetch-depth: 0

        - name: 'Validate workflow options'
          run: |
            if
                if git ls-remote ${{ github.event.inputs.KERNEL_GIT }} | grep -w "${{ github.event.inputs.KERNEL_GIT_BRANCH }}" > /dev/null; then
                    echo "--- Kernel source git link and branch points to a valid git repo! ---"
                elif git ls-remote ${{ github.event.inputs.KERNEL_GIT }} > /dev/null; then
                    echo "--- Kernel source git link points to a valid git repo, but the branch specified is invalid, please specify the branch properly! ---"
                    exit 1
                else
                    echo "--- Kernel source git link and branch points to an invalid git repo, please specify them properly! ---"
                    exit 1
                fi
                if [ ! -z ${{ github.event.inputs.KERNEL_COMPILER_TOOLCHAIN }} ]; then
                    if curl -sIL "${{ github.event.inputs.KERNEL_COMPILER_TOOLCHAIN }}" | grep -i "content-disposition: attachment" > /dev/null || curl -sIL "${{ github.event.inputs.KERNEL_COMPILER_TOOLCHAIN }}" | grep -i "content-type: application/octet-stream" > /dev/null; then
                        echo "--- Custom compiler prebuilt toolchain link is a valid direct download link ---"
                    else
                        echo "--- Custom compiler prebuilt toolchain link either isn't a direct download link or is invalid ---"
                        exit 1
                    fi
                fi
            then
                echo "--- All link-related workflow options seem to be valid! ---"
            fi
        
        - name: 'Setup dependencies and environment'
          run: |
            set -e
            # Setup package sources and apt
            sudo cp /etc/apt/sources.list.d/ubuntu.sources /etc/apt/sources.list.d/ubuntu.sources~
            sudo sed -Ei 's/^Types: deb$/Types: deb deb-src/' /etc/apt/sources.list.d/ubuntu.sources
            sudo apt-get update -y

            # Install kernel build dependencies
            sudo apt build-dep -y linux

            # Install official LLVM/Clang if selected
            if [ "${{ github.event.inputs.KERNEL_COMPILER }}" == 'Clang/LLVM' ]; then
                echo "--- Downloading and setting up Latest Official LLVM/Clang ---"
                LATEST_LLVM_TOOLCHAIN=$(curl -sSf https://api.github.com/repos/llvm/llvm-project/releases/latest | grep "browser_download_url.*-ubuntu-22.04.tar.xz" | cut -d '"' -f 4)
                if [ -z "$LATEST_LLVM_TOOLCHAIN" ]; then
                    # Fallback for different naming conventions
                    LATEST_LLVM_TOOLCHAIN=$(curl -sSf https://api.github.com/repos/llvm/llvm-project/releases/latest | grep "browser_download_url.*-linux-x86_64.tar.xz" | cut -d '"' -f 4)
                fi
                wget "$LATEST_LLVM_TOOLCHAIN" -O ./LLVM-latest.tar.xz
                tar -xf ./LLVM-latest.tar.xz --strip-components=1
                rm -rf ./*.tar.xz
            fi

            # Kept for reference, but not recommended due to being abandoned
            if [ "${{ github.event.inputs.KERNEL_COMPILER }}" == 'Proton Clang' ]; then
                echo "--- Proton Clang is abandoned and may not work. Using direct link on ubuntu-20.04 is required. ---"
                # This block is intentionally left simple as it requires a specific runner.
                # The user would need to change runs-on to ubuntu-20.04 for this to work.
                PROTON_CLANG_URL="https://github.com/kdrag0n/proton-clang/archive/refs/tags/20210522.tar.gz"
                wget "$PROTON_CLANG_URL" -O proton-clang.tar.gz
                mkdir ./proton-clang-toolchain
                tar -xf proton-clang.tar.gz -C ./proton-clang-toolchain --strip-components=1
                rm -f proton-clang.tar.gz
            fi

            # Install GCC for cross-compiling
            if [ "${{ github.event.inputs.KERNEL_COMPILER }}" != 'GCC/Binutils' ]; then
                wget https://developer.arm.com/-/media/Files/downloads/gnu/14.2.rel1/binrel/arm-gnu-toolchain-14.2.rel1-x86_64-arm-none-linux-gnueabihf.tar.xz https://developer.arm.com/-/media/Files/downloads/gnu/14.2.rel1/binrel/arm-gnu-toolchain-14.2.rel1-x86_64-aarch64-none-linux-gnu.tar.xz
                for file in *.tar.xz; do tar --wildcards -xvpf $file --warning=no-file-changed --ignore-failed-read || true; done
                rm -rf *.tar.xz
            fi

            # Install some general dependencies
            sudo apt-get install -y p7zip-full tar bzip2 unrar gzip zip unzip python3-dev repo

            # Download and extract custom compiler toolchain if provided
            if [ ! -z "${{ github.event.inputs.KERNEL_COMPILER_TOOLCHAIN }}" ]; then
                mkdir ./compiler-toolchain
                wget "${{ github.event.inputs.KERNEL_COMPILER_TOOLCHAIN }}" -P ./compiler-toolchain
                cd ./compiler-toolchain/
                unp ./*
                cd ../
            fi

        - name: 'Clone kernel source'
          run: |
            rm -rf ./kernel-src*/
            mkdir ./kernel-src-clone/
            cd ./kernel-src-clone/

            if git ls-remote ${{ github.event.inputs.KERNEL_GIT }} | grep -w "${{ github.event.inputs.KERNEL_GIT_BRANCH }}" > /dev/null; then
                echo "--- Kernel source git link and branch points to a valid git repo! ---"
                if repo init --no-repo-verify --git-lfs --depth=1 -u ${{ github.event.inputs.KERNEL_GIT }} -b ${{ github.event.inputs.KERNEL_GIT_BRANCH }}; then
                    echo "--- Syncing via repo ---"
                    repo sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --force-sync -j$(nproc --all)
                    echo "--- Syncing finished ---"
                    cd ..
                    ln -sf $(find ./kernel-src-clone/ -maxdepth 2 -type d -name "common" | head -n 1) ./kernel-src
                else
                    echo "--- Cloning via git ---"
                    rm -rf ./.repo/
                    cd ..
                    git clone --depth=1 ${{ github.event.inputs.KERNEL_GIT }} -b ${{ github.event.inputs.KERNEL_GIT_BRANCH }} ./kernel-src-clone/
                    echo "--- Cloning finished ---"
                    ln -sf ./kernel-src-clone ./kernel-src
                fi
            elif git ls-remote ${{ github.event.inputs.KERNEL_GIT }} > /dev/null; then
                echo "--- Kernel source git link points to a valid git repo, but the branch specified is invalid, please specify the branch properly! ---"
                exit 1
            else
                echo "--- Kernel source git link and branch points to an invalid git repo, please specify them properly! ---"
                exit 1
            fi

        - name: 'Clone any submodules if present'
          working-directory: './kernel-src'
          run: |
            git submodule init; git submodule update

            # Delete files that may conflict with kernel functionality
            rm -rf ./android/abi_gki_protected_exports*

        - name: 'Generate the kernel .config file'
          working-directory: './kernel-src'
          run: |
            shopt -s globstar

            # Generate kernel config using make
            if [ "${{ github.event.inputs.KERNEL_COMPILER }}" == 'Proton Clang' ]; then
                make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ../proton-clang-toolchain/bin)/clang LD=$(realpath ../proton-clang-toolchain/bin)/ld.lld AR=$(realpath ../proton-clang-toolchain/bin)/llvm-ar NM=$(realpath ../proton-clang-toolchain/bin)/llvm-nm STRIP=$(realpath ../proton-clang-toolchain/bin)/llvm-strip OBJCOPY=$(realpath ../proton-clang-toolchain/bin)/llvm-objcopy OBJDUMP=$(realpath ../proton-clang-toolchain/bin)/llvm-objdump OBJSIZE=$(realpath ../proton-clang-toolchain/bin)/llvm-size READELF=$(realpath ../proton-clang-toolchain/bin)/llvm-readelf HOSTCC=$(realpath ../proton-clang-toolchain/bin)/clang HOSTCXX=$(realpath ../proton-clang-toolchain/bin)/clang++ HOSTAR=$(realpath ../proton-clang-toolchain/bin)/llvm-ar HOSTLD=$(realpath ../proton-clang-toolchain/bin)/ld.lld -j$(nproc --all) O=out ${{ github.event.inputs.KERNEL_CONFIGS }}
            elif [ "${{ github.event.inputs.KERNEL_COMPILER }}" == 'Clang/LLVM' ]; then
                if [ ! -z "${{ github.event.inputs.KERNEL_COMPILER_TOOLCHAIN }}" ]; then
                    make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}clang LD=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}ld.lld AR=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-ar NM=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-nm STRIP=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-strip OBJCOPY=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-objcopy OBJDUMP=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-objdump OBJSIZE=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-size READELF=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-readelf HOSTCC=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}clang HOSTCXX=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}clang++ HOSTAR=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-ar HOSTLD=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}ld.lld -j$(nproc --all) O=out ${{ github.event.inputs.KERNEL_CONFIGS }}
                else
                    make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~)/clang*/bin/clang LD=$(realpath ~)/clang*/bin/ld.lld AR=$(realpath ~)/clang*/bin/llvm-ar NM=$(realpath ~)/clang*/bin/llvm-nm STRIP=$(realpath ~)/clang*/bin/llvm-strip OBJCOPY=$(realpath ~)/clang*/bin/llvm-objcopy OBJDUMP=$(realpath ~)/clang*/bin/llvm-objdump OBJSIZE=$(realpath ~)/clang*/bin/llvm-size READELF=$(realpath ~)/clang*/bin/llvm-readelf HOSTCC=$(realpath ~)/clang*/bin/clang HOSTCXX=$(realpath ~)/clang*/bin/clang++ HOSTAR=$(realpath ~)/clang*/bin/llvm-ar HOSTLD=$(realpath ~)/clang*/bin/ld.lld -j$(nproc --all) O=out ${{ github.event.inputs.KERNEL_CONFIGS }}
                fi
            fi

            if [ "${{ github.event.inputs.KERNEL_COMPILER }}" == 'GCC/Binutils' ]; then
                if [ ! -z "${{ github.event.inputs.KERNEL_COMPILER_TOOLCHAIN }}" ]; then
                    make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}gcc CROSS_COMPILE=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }} -j$(nproc --all) O=out ${{ github.event.inputs.KERNEL_CONFIGS }}
                else
                    if [ "${{ github.event.inputs.KERNEL_ARCH }}" == 'arm' ]; then
                        make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-arm-none-linux-gnu*/bin)/arm-none-linux-gnueabihf-gcc CROSS_COMPILE=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-arm-none-linux-gnu*/bin)/arm-none-linux-gnueabihf- -j$(nproc --all) O=out ${{ github.event.inputs.KERNEL_CONFIGS }}
                    else
                        make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-aarch64-none-linux-gnu*/bin)/aarch64-none-linux-gnu-gcc CROSS_COMPILE=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-aarch64-none-linux-gnu*/bin)/aarch64-none-linux-gnu- -j$(nproc --all) O=out ${{ github.event.inputs.KERNEL_CONFIGS }}
                    fi
                fi
            fi

            if [ "${{ github.event.inputs.KERNEL_COMPILER }}" == 'Clang/Binutils' ]; then
                if [ ! -z "${{ github.event.inputs.KERNEL_COMPILER_TOOLCHAIN }}" ]; then
                    if [ "${{ github.event.inputs.KERNEL_ARCH }}" == 'arm' ]; then
                        make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}clang CLANG_TRIPLE=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-arm-none-linux-gnu*/bin)/arm-none-linux-gnueabihf- CROSS_COMPILE=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }} -j$(nproc --all) O=out ${{ github.event.inputs.KERNEL_CONFIGS }}
                    else
                        make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}clang CLANG_TRIPLE=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-aarch64-none-linux-gnu*/bin)/aarch64-none-linux-gnu- CROSS_COMPILE=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }} -j$(nproc --all) O=out ${{ github.event.inputs.KERNEL_CONFIGS }}
                    else
                        make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~)/clang*/bin/clang CLANG_TRIPLE=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-aarch64-none-linux-gnu*/bin)/aarch64-none-linux-gnu- CROSS_COMPILE=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-aarch64-none-linux-gnu*/bin)/aarch64-none-linux-gnu- -j$(nproc --all) O=out ${{ github.event.inputs.KERNEL_CONFIGS }}
                    fi
                fi
            fi

            if [ "${{ github.event.inputs.KERNEL_COMPILER }}" == 'GCC/LLVM' ]; then
                if [ ! -z "${{ github.event.inputs.KERNEL_COMPILER_TOOLCHAIN }}" ]; then
                    make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}gcc LD=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}ld.lld AR=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-ar NM=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-nm STRIP=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-strip OBJCOPY=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-objcopy OBJDUMP=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-objdump OBJSIZE=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-size READELF=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-readelf HOSTCC=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}clang HOSTCXX=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}clang++ HOSTAR=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-ar HOSTLD=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}ld.lld -j$(nproc --all) O=out ${{ github.event.inputs.KERNEL_CONFIGS }}
                else
                    if [ "${{ github.event.inputs.KERNEL_ARCH }}" == 'arm' ]; then
                        make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-arm-none-linux-gnu*/bin)/arm-none-linux-gnueabihf-gcc LD=$(realpath ~)/clang*/bin/ld.lld AR=$(realpath ~)/clang*/bin/llvm-ar NM=$(realpath ~)/clang*/bin/llvm-nm STRIP=$(realpath ~)/clang*/bin/llvm-strip OBJCOPY=$(realpath ~)/clang*/bin/llvm-objcopy OBJDUMP=$(realpath ~)/clang*/bin/llvm-objdump OBJSIZE=$(realpath ~)/clang*/bin/llvm-size READELF=$(realpath ~)/clang*/bin/llvm-readelf HOSTCC=$(realpath ~)/clang*/bin/clang HOSTCXX=$(realpath ~)/clang*/bin/clang++ HOSTAR=$(realpath ~)/clang*/bin/llvm-ar HOSTLD=$(realpath ~)/clang*/bin/ld.lld -j$(nproc --all) O=out ${{ github.event.inputs.KERNEL_CONFIGS }}
                    else
                        make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-aarch64-none-linux-gnu*/bin)/aarch64-none-linux-gnu-gcc LD=$(realpath ~)/clang*/bin/ld.lld AR=$(realpath ~)/clang*/bin/llvm-ar NM=$(realpath ~)/clang*/bin/llvm-nm STRIP=$(realpath ~)/clang*/bin/llvm-strip OBJCOPY=$(realpath ~)/clang*/bin/llvm-objcopy OBJDUMP=$(realpath ~)/clang*/bin/llvm-objdump OBJSIZE=$(realpath ~)/clang*/bin/llvm-size READELF=$(realpath ~)/clang*/bin/llvm-readelf HOSTCC=$(realpath ~)/clang*/bin/clang HOSTCXX=$(realpath ~)/clang*/bin/clang++ HOSTAR=$(realpath ~)/clang*/bin/llvm-ar HOSTLD=$(realpath ~)/clang*/bin/ld.lld -j$(nproc --all) O=out ${{ github.event.inputs.KERNEL_CONFIGS }}
                    fi
                fi
            fi

            echo 'CONFIG_LOCALVERSION_AUTO=n' >> out/.config
            sed -i '/res="$res${scm:++}"/d' scripts/setlocalversion
            echo 'CONFIG_KPROBES=n' >> out/.config

        - name: 'Build kernel'
          working-directory: './kernel-src'
          run: |
            shopt -s globstar

            # Compile using make
            if [ "${{ github.event.inputs.KERNEL_COMPILER }}" == 'Proton Clang' ]; then
                make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ../proton-clang-toolchain/bin)/clang LD=$(realpath ../proton-clang-toolchain/bin)/ld.lld AR=$(realpath ../proton-clang-toolchain/bin)/llvm-ar NM=$(realpath ../proton-clang-toolchain/bin)/llvm-nm STRIP=$(realpath ../proton-clang-toolchain/bin)/llvm-strip OBJCOPY=$(realpath ../proton-clang-toolchain/bin)/llvm-objcopy OBJDUMP=$(realpath ../proton-clang-toolchain/bin)/llvm-objdump OBJSIZE=$(realpath ../proton-clang-toolchain/bin)/llvm-size READELF=$(realpath ../proton-clang-toolchain/bin)/llvm-readelf HOSTCC=$(realpath ../proton-clang-toolchain/bin)/clang HOSTCXX=$(realpath ../proton-clang-toolchain/bin)/clang++ HOSTAR=$(realpath ../proton-clang-toolchain/bin)/llvm-ar HOSTLD=$(realpath ../proton-clang-toolchain/bin)/ld.lld -j$(nproc --all) O=out Image.gz-dtb dtbo.img
            elif [ "${{ github.event.inputs.KERNEL_COMPILER }}" == 'Clang/LLVM' ]; then
                if [ ! -z "${{ github.event.inputs.KERNEL_COMPILER_TOOLCHAIN }}" ]; then
                    make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}clang LD=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}ld.lld AR=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-ar NM=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-nm STRIP=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-strip OBJCOPY=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-objcopy OBJDUMP=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-objdump OBJSIZE=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-size READELF=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-readelf HOSTCC=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}clang HOSTCXX=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}clang++ HOSTAR=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-ar HOSTLD=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}ld.lld -j$(nproc --all) O=out Image.gz-dtb dtbo.img
                else
                    make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~)/clang*/bin/clang LD=$(realpath ~)/clang*/bin/ld.lld AR=$(realpath ~)/clang*/bin/llvm-ar NM=$(realpath ~)/clang*/bin/llvm-nm STRIP=$(realpath ~)/clang*/bin/llvm-strip OBJCOPY=$(realpath ~)/clang*/bin/llvm-objcopy OBJDUMP=$(realpath ~)/clang*/bin/llvm-objdump OBJSIZE=$(realpath ~)/clang*/bin/llvm-size READELF=$(realpath ~)/clang*/bin/llvm-readelf HOSTCC=$(realpath ~)/clang*/bin/clang HOSTCXX=$(realpath ~)/clang*/bin/clang++ HOSTAR=$(realpath ~)/clang*/bin/llvm-ar HOSTLD=$(realpath ~)/clang*/bin/ld.lld -j$(nproc --all) O=out Image.gz-dtb dtbo.img
                fi
            elif [ "${{ github.event.inputs.KERNEL_COMPILER }}" == 'GCC/Binutils' ]; then
                if [ ! -z "${{ github.event.inputs.KERNEL_COMPILER_TOOLCHAIN }}" ]; then
                    make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}gcc CROSS_COMPILE=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }} -j$(nproc --all) O=out Image.gz-dtb dtbo.img
                else
                    if [ "${{ github.event.inputs.KERNEL_ARCH }}" == 'arm' ]; then
                        make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-arm-none-linux-gnu*/bin)/arm-none-linux-gnueabihf-gcc CROSS_COMPILE=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-arm-none-linux-gnu*/bin)/arm-none-linux-gnueabihf- -j$(nproc --all) O=out Image.gz-dtb dtbo.img
                    else
                        make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-aarch64-none-linux-gnu*/bin)/aarch64-none-linux-gnu-gcc CROSS_COMPILE=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-aarch64-none-linux-gnu*/bin)/aarch64-none-linux-gnu- -j$(nproc --all) O=out Image.gz-dtb dtbo.img
                    fi
                fi
            elif [ "${{ github.event.inputs.KERNEL_COMPILER }}" == 'Clang/Binutils' ]; then
                if [ ! -z "${{ github.event.inputs.KERNEL_COMPILER_TOOLCHAIN }}" ]; then
                    if [ "${{ github.event.inputs.KERNEL_ARCH }}" == 'arm' ]; then
                        make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}clang CLANG_TRIPLE=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-arm-none-linux-gnu*/bin)/arm-none-linux-gnueabihf- CROSS_COMPILE=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }} -j$(nproc --all) O=out Image.gz-dtb dtbo.img
                    else
                        make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}clang CLANG_TRIPLE=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-aarch64-none-linux-gnu*/bin)/aarch64-none-linux-gnu- CROSS_COMPILE=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }} -j$(nproc --all) O=out Image.gz-dtb dtbo.img
                    fi
                else
                    if [ "${{ github.event.inputs.KERNEL_ARCH }}" == 'arm' ]; then
                        make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=clang CLANG_TRIPLE=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-arm-none-linux-gnu*/bin)/arm-none-linux-gnueabihf- CROSS_COMPILE=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-arm-none-linux-gnu*/bin)/arm-none-linux-gnueabihf- -j$(nproc --all) O=out Image.gz-dtb dtbo.img
                    else
                        make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=clang CLANG_TRIPLE=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-aarch64-none-linux-gnu*/bin)/aarch64-none-linux-gnu- CROSS_COMPILE=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-aarch64-none-linux-gnu*/bin)/aarch64-none-linux-gnu- -j$(nproc --all) O=out Image.gz-dtb dtbo.img
                    fi
                fi
            elif [ "${{ github.event.inputs.KERNEL_COMPILER }}" == 'GCC/LLVM' ]; then
                if [ ! -z "${{ github.event.inputs.KERNEL_COMPILER_TOOLCHAIN }}" ]; then
                    make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}gcc LD=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}ld.lld AR=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-ar NM=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-nm STRIP=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-strip OBJCOPY=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-objcopy OBJDUMP=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-objdump OBJSIZE=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-size READELF=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-readelf HOSTCC=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}clang HOSTCXX=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}clang++ HOSTAR=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}llvm-ar HOSTLD=$(realpath ~/**/compiler-toolchain)/${{ github.event.inputs.KERNEL_COMPILER_PREFIX }}ld.lld -j$(nproc --all) O=out Image.gz-dtb dtbo.img
                else
                    if [ "${{ github.event.inputs.KERNEL_ARCH }}" == 'arm' ]; then
                        make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-arm-none-linux-gnu*/bin)/arm-none-linux-gnueabihf-gcc LD=$(realpath ~)/clang*/bin/ld.lld AR=$(realpath ~)/clang*/bin/llvm-ar NM=$(realpath ~)/clang*/bin/llvm-nm STRIP=$(realpath ~)/clang*/bin/llvm-strip OBJCOPY=$(realpath ~)/clang*/bin/llvm-objcopy OBJDUMP=$(realpath ~)/clang*/bin/llvm-objdump OBJSIZE=$(realpath ~)/clang*/bin/llvm-size READELF=$(realpath ~)/clang*/bin/llvm-readelf HOSTCC=$(realpath ~)/clang*/bin/clang HOSTCXX=$(realpath ~)/clang*/bin/clang++ HOSTAR=$(realpath ~)/clang*/bin/llvm-ar HOSTLD=$(realpath ~)/clang*/bin/ld.lld -j$(nproc --all) O=out Image.gz-dtb dtbo.img
                    else
                        make ARCH=${{ github.event.inputs.KERNEL_ARCH }} CC=$(realpath ~/**/arm-gnu-toolchain-*-x86_64-aarch64-none-linux-gnu*/bin)/aarch64-none-linux-gnu-gcc LD=$(realpath ~)/clang*/bin/ld.lld AR=$(realpath ~)/clang*/bin/llvm-ar NM=$(realpath ~)/clang*/bin/llvm-nm STRIP=$(realpath ~)/clang*/bin/llvm-strip OBJCOPY=$(realpath ~)/clang*/bin/llvm-objcopy OBJDUMP=$(realpath ~)/clang*/bin/llvm-objdump OBJSIZE=$(realpath ~)/clang*/bin/llvm-size READELF=$(realpath ~)/clang*/bin/llvm-readelf HOSTCC=$(realpath ~)/clang*/bin/clang HOSTCXX=$(realpath ~)/clang*/bin/clang++ HOSTAR=$(realpath ~)/clang*/bin/llvm-ar HOSTLD=$(realpath ~)/clang*/bin/ld.lld -j$(nproc --all) O=out Image.gz-dtb dtbo.img
                    fi
                fi
            fi

        - name: 'Prepare and Package with AnyKernel3'
          run: |
            echo "Cloning AnyKernel3 repository..."
            git clone https://github.com/blazey66/AnyKernel3.git
            
            echo "Copying built kernel files..."
            cp kernel-src/out/arch/${{ github.event.inputs.KERNEL_ARCH }}/boot/Image.gz-dtb AnyKernel3/
            cp kernel-src/out/arch/${{ github.event.inputs.KERNEL_ARCH }}/boot/dtbo.img AnyKernel3/
            
            echo "Creating flashable zip..."
            cd AnyKernel3
            zip -r9 ../blaze-kernel-sdm439-ksu.zip * -x .git README.md \*placeholder
            cd ..

        - name: 'Upload Flashable Kernel Zip'
          uses: actions/upload-artifact@v4
          with:
            name: blaze-kernel-sdm439-ksu
            path: blaze-kernel-sdm439-ksu.zip
      
        - name: 'Upload Image.gz-dtb'
          uses: actions/upload-artifact@v4
          with:
            name: Image.gz-dtb
            path: kernel-src/out/arch/${{ github.event.inputs.KERNEL_ARCH }}/boot/Image.gz-dtb

        - name: 'Upload dtbo.img'
          uses: actions/upload-artifact@v4
          with:
            name: dtbo.img
            path: kernel-src/out/arch/${{ github.event.inputs.KERNEL_ARCH }}/boot/dtbo.img
